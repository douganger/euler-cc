// Copyright 2017 Douglas Anger

// Problem 2
//
// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed
// four million, find the sum of the even-valued terms.
//
// https://projecteuler.net/problem=2

#include <iostream>
using std::cout;
using std::endl;

int main() {
  // Keep track of the sum of even Fibonacci numbers as we go progress through
  // the sequence.
  int sum = 0;

  // Because each Fibonacci number is calculated from the previous two
  // Fibonacci numbers, it's easiest to keep track of the two trailing numbers.
  // I start with {1,1} and consider fib2 to be the current number in the
  // sequence because that matches the output (starting with a single 1) given
  // in the problem.

  int fib1 = 1;
  int fib2 = 1;

  // We need someplace to store the sum of fib1 and fib2 temporarily in each
  // iteration.

  int next = 0;

  while ( fib2 < 4000000 ) {
    // Output the current Fibonacci number.
    cout << fib2 << endl;

    // If it is even, add it to the sum.
    if ( fib2 % 2 == 0 ) { sum += fib2; }

    // Calculate the next set of numbers.
    next = fib1 + fib2;
    fib1 = fib2;
    fib2 = next;
  }

  // Output the final sum.
  cout << "Sum: " << sum << endl;

  return 0;
}
